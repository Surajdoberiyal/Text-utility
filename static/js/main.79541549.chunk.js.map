{"version":3,"sources":["Component/Navbar.js","Component/TextUtils.js","Component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","name","onClick","toggleMode","role","htmlFor","TextUtils","useState","text","setText","style","color","backgroundColor","value","onChange","eve","target","rows","placeholder","newUppperText","toUpperCase","showAlert","newLowerText","toLowerCase","newtext","document","getElementById","select","navigator","clipboard","writeText","newSpacetext","split","join","filter","t","length","Alert","alert","words","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.79541549.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n        <nav className= {`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}> \r\n        <div className=\"container\">\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n          {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"/navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/about\">\r\n                  {props.name}\r\n                </a>\r\n              </li>\r\n            </ul>\r\n               <div  className={`form-check form-switch text-${props.mode=== 'light'? 'Dark' : 'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label\"\r\n               htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    name: PropTypes.string\r\n}","import React, { useState } from \"react\";\r\n\r\nexport default function TextUtils(props) {\r\n  const [text, setText] = useState('');\r\n  const HandleOnClick = () => {\r\n    let newUppperText = text.toUpperCase();\r\n    setText(newUppperText);\r\n    props.showAlert(\"Converted to Uppercase\", \"success\")\r\n  };\r\n\r\n  const HandleOnChange = (eve) => {\r\n    setText(eve.target.value);\r\n  };\r\n\r\n  const HandleOnLowecase = () => {\r\n    let newLowerText = text.toLowerCase();\r\n    setText(newLowerText);\r\n    props.showAlert(\"Converted to lowercase\", \"success\")\r\n\r\n  };\r\n  const HandleOnClear = () => {\r\n    let newLowerText = \"\";\r\n    setText(newLowerText);\r\n    props.showAlert(\"Text cleared\", \"success\")\r\n\r\n  };\r\n  const HandleOnCopy = () => {\r\n    let newtext = document.getElementById(\"text-area\");\r\n    newtext.select();\r\n    navigator.clipboard.writeText(newtext.value);\r\n    props.showAlert(\"Copied to Clipboard\", \"success\")\r\n\r\n  };\r\n  const HandleOnExtraSpace = () => {\r\n    let newSpacetext = text.split(/[ ]+/);\r\n    setText(newSpacetext.join(\" \"));\r\n    props.showAlert(\"Removed extra spaces\" , \"success\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container mt-5\"  style= {{color: props.mode==='dark' ? 'white' : 'black'}}>\r\n        <div className=\"mb-3\">\r\n          <h2> {props.title}</h2>\r\n          <textarea\r\n            className=\"form-control mt-4\"\r\n            style= {{backgroundColor: props.mode==='dark'?'#0B0B45' : 'white' ,\r\n             color : props.mode==='dark' ? 'white' : 'black'}}\r\n            id=\"text-area\"\r\n            value={text}\r\n            onChange={HandleOnChange}\r\n            rows=\"9\"\r\n            placeholder=\"Enter your text here\"\r\n          />\r\n          <button\r\n            type=\"button\"\r\n            onClick={HandleOnClick}\r\n            className=\"btn btn-primary my-4\"\r\n          >\r\n            Convert to Uppercase\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            onClick={HandleOnLowecase}\r\n            className=\"btn btn-danger my-4 mx-3\"\r\n          >\r\n            Convert to Lowecase\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            onClick={HandleOnClear}\r\n            className=\"btn btn-secondary my-4\"\r\n          >\r\n            Clear Text\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            onClick={HandleOnCopy}\r\n            className=\"btn btn-info mx-4\"\r\n          >\r\n            Copy Text\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            onClick={HandleOnExtraSpace}\r\n            className=\"btn btn-warning\"\r\n          >\r\n            Remove Extra Space\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"container\"  style= {{color: props.mode==='dark' ? 'white' : 'black'}}>\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {text.split(\" \").filter((t) => t!==\"\").length} words and {text.length} characters\r\n        </p>\r\n        <h2>Text preview</h2>\r\n        <p>{text}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport const Alert = (props) => {\r\n     const capitalize = (words)=>{\r\n         const lower = words.toLowerCase();\r\n         return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n\r\n     }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n          <strong> {capitalize(props.alert.type)} </strong>:  {props.alert.msg}\r\n         </div>\r\n    )\r\n}\r\n","import Navbar from \"./Component/Navbar\";\r\nimport TextUtils from \"./Component/TextUtils\";\r\nimport React, { useState } from \"react\";\r\nimport { Alert } from \"./Component/Alert\";\r\n// import About from \"./Component/About\";\r\n// import React from \"react\";\r\n// import {\r\n//   BrowserRouter as Router,\r\n//   Switch,\r\n//   Route\r\n// } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState(\"light\");\r\n\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert = (message, type) => {\r\n    setAlert({\r\n      msg: message,\r\n      type: type,\r\n    });\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 1600);\r\n  };\r\n\r\n  const toggleMode = () => {\r\n    if (mode === \"light\") {\r\n      setMode(\"dark\");\r\n      document.body.style.backgroundColor = \"#0B0B45\";\r\n      showAlert(\"Dark mode is enabled\", \"success\");\r\n    } else {\r\n      setMode(\"light\");\r\n      document.body.style.backgroundColor = \"white\";\r\n      showAlert(\"Light mode is enabled\", \"success\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n    {/* <Router> */}\r\n      <Navbar\r\n        title=\"Developer\"\r\n        name=\"About-us\"\r\n        mode={mode}\r\n        toggleMode={toggleMode}\r\n      />\r\n      <Alert alert={alert} />\r\n      {/* <Switch>\r\n        <Route exact path=\"/about\">\r\n        <About mode={mode} />\r\n        </Route>\r\n        <Route exact path=\"/\"> */}\r\n        <TextUtils\r\n        showAlert={showAlert}\r\n        title=\"Enter your text here for easy modifying\"\r\n        mode={mode}\r\n      />\r\n        {/* </Route>\r\n      </Switch>\r\n      </Router> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}